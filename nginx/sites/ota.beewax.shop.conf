server {
    listen 80;
    server_name ota.beewax.shop;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name ota.beewax.shop;

    # SSL/TLS Configuration
    ssl_certificate /etc/nginx/ssl/ota.beewax.shop.crt;
    ssl_certificate_key /etc/nginx/ssl/ota.beewax.shop.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';" always;

    # Static File Serving
    root /srv/ota;
    index index.html;

    # Health Check Endpoint
    location /fw/health {
        access_log off;
        return 200 "OTA Server OK\n";
        add_header Content-Type text/plain;
    }

    # Firmware Directory
    location /fw/ {
        autoindex off;
        try_files $uri $uri/ =404;

        # Cache firmware files for 1 hour
        location ~* \.(bin|hex)$ {
            expires 1h;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }

        # JSON metadata files
        location ~* \.(json|txt|md)$ {
            expires 1m;
            add_header Cache-Control "public";
        }
    }

    # API Endpoints
    location /api/ {
        try_files $uri $uri/ @backend;
    }

    location @backend {
        proxy_pass http://api:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}